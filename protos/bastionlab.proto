syntax = "proto3";
package bastionlab;

message ReferenceRequest {
    string identifier = 1;
}

message ReferenceResponse {
    string identifier = 1;
    string header = 2;
}

message ReferenceList {
    repeated ReferenceResponse list = 1;
}

message SendChunk {
    bytes data = 1;
    string policy = 2;
    string metadata = 3;
}

message FetchChunk {
    bytes data = 1;
    string pending = 2;
}

message Query {
    string composite_plan = 1;
}

message Empty {}

message ChallengeResponse {
    bytes value = 1;
}

message ClientInfo {
    string uid = 1;
    string platform_name = 2;
    string platform_arch = 3;
    string platform_version = 4;
    string platform_release = 5;
    string user_agent = 6;
    string user_agent_version = 7;
}

message SessionInfo {
    bytes token = 1;
}

message PredictionRequest{
    string model = 1;
    repeated float data = 2;
}

message TrainingRequest {
    string records = 1;
    string target = 2;
    float ratio = 3;

    oneof trainer {
        GaussianNb gaussian_nb = 4;
        ElasticNet elastic_net = 5;
        KMeans kmeans = 6;
        LinearRegression linear_regression = 7;
    }

    message GaussianNb {
        float var_smoothing = 1;
    }

    message ElasticNet {
        float penalty = 1;
        float l1_ratio = 2;
        bool with_intercept = 3;
        uint32 max_iterations = 4;
        float tolerance = 5;
    }

    message KMeans {
        uint64 n_runs = 1;
        uint64 n_clusters = 2;
        float tolerance = 3;
        uint64 max_n_iterations = 4;

        oneof init_method {
            Random random = 5;
            Precomputed pre_computed = 6;
            KMeansPlusPlus kmeans_plus_plus = 7;
            KMeansPara kmeans_para = 8;
        }

        message Random {}
        message Precomputed {
            repeated float list = 1;
            int32 n_centroids = 2;
            int32 n_features = 3;
        }
        message KMeansPlusPlus {}
        message KMeansPara {}
    }

    message LinearRegression {
        bool fit_intercept = 1;
    }
}

service BastionLab {
    rpc SendDataFrame (stream SendChunk) returns (ReferenceResponse) {}
    rpc RunQuery (Query) returns (ReferenceResponse) {}
    rpc GetChallenge (Empty) returns (ChallengeResponse) {}
    rpc FetchDataFrame (ReferenceRequest) returns (stream FetchChunk) {}
    rpc ListDataFrames (Empty) returns (ReferenceList) {}
    rpc GetDataFrameHeader (ReferenceRequest) returns (ReferenceResponse) {}
    rpc CreateSession (ClientInfo) returns (SessionInfo) {}
    rpc RefreshSession (Empty) returns (Empty) {}
    rpc Train(TrainingRequest) returns (ReferenceResponse) {}
    rpc Predict(PredictionRequest) returns (ReferenceResponse) {}
}
