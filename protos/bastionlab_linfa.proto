syntax = "proto3";
package bastionlab_linfa;

message ReferenceResponse {
    string identifier = 1;
    string header = 2;
}

message ModelResponse {
    string identifier = 1;
}

message PredictionRequest{
    string model = 1;
    repeated float data = 2;
    bool probability = 3;
}

message ValidationRequest {
    string model = 1;
}

message ValidationResponse {
    repeated float response = 1;
}

message TrainingRequest {
    string records = 1;
    string target = 2;
    float ratio = 3;

    oneof trainer {
        GaussianNb gaussian_nb = 4;
        ElasticNet elastic_net = 5;
        KMeans kmeans = 6;
        LinearRegression linear_regression = 7;
        LogisticRegression logistic_regression = 8;
        DecisionTree decision_tree = 9;
    }

    message GaussianNb {
        float var_smoothing = 1;
    }

    message ElasticNet {
        float penalty = 1;
        float l1_ratio = 2;
        bool with_intercept = 3;
        uint32 max_iterations = 4;
        float tolerance = 5;
    }

    message KMeans {
        uint64 n_runs = 1;
        uint64 n_clusters = 2;
        float tolerance = 3;
        uint64 max_n_iterations = 4;

        oneof init_method {
            Random random = 5;
            Precomputed pre_computed = 6;
            KMeansPlusPlus kmeans_plus_plus = 7;
            KMeansPara kmeans_para = 8;
        }

        message Random {}
        message Precomputed {
            repeated float list = 1;
            int32 n_centroids = 2;
            int32 n_features = 3;
        }
        message KMeansPlusPlus {}
        message KMeansPara {}
    }

    message LinearRegression {
        bool fit_intercept = 1;
    }

    message LogisticRegression {
        float alpha = 1;
        float gradient_tolerance = 2;
        bool fit_intercept = 3;
        uint64 max_iterations = 4;
        repeated float initial_params = 7;
    }

    message DecisionTree {
        
        message Gini {}
        message Entropy {}
        oneof  split_quality{
            Gini gini = 1;
            Entropy entropy = 2;
        };
        optional uint64 max_depth = 3;
        float min_weight_split = 4;
        float min_weight_leaf = 5;
        float min_impurity_decrease= 6;
    }
}

service LinfaService {
    rpc Train(TrainingRequest) returns (ModelResponse) {}
    rpc Predict(PredictionRequest) returns (ReferenceResponse) {}
    rpc CrossValidate(ValidationRequest) returns (ReferenceResponse) {}
}